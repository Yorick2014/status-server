#include <iostream>
#include <WinSock2.h>
#include <ctime>
#include <thread>

#pragma comment (lib, "Ws2_32.lib")
#pragma warning(disable: 4996)

// Функция для отправки HTTP-ответа с датой и временем
void send_response(SOCKET client_socket) {
    // Получаем текущее время
    std::time_t now = std::time(0);
    char* dt = std::ctime(&now);

    // Простой HTTP-ответ с датой и временем
    std::string response =
        "HTTP/1.1 200 OK\r\n"
        "Content-Type: text/html\r\n"
        "Connection: close\r\n\r\n"
        "<html><body><h1>Current Date and Time</h1><p>" + std::string(dt) + "</p></body></html>";

    // Отправляем ответ клиенту
    send(client_socket, response.c_str(), response.length(), 0);
}

int main()
{
    //WSAStartup
    WSAData wsaData;
    WORD DLLVersion = MAKEWORD(2, 1);
    if (WSAStartup(DLLVersion, &wsaData) != 0)
    {
        std::cout << "Error\n";
        exit(1);
    }

    SOCKADDR_IN addr;
    int sizeofaddr = sizeof(addr);
    addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    addr.sin_port = htons(15476);
    addr.sin_family = AF_INET;

    SOCKET sListenn = socket(AF_INET, SOCK_STREAM, NULL);
    bind(sListenn, (SOCKADDR*)&addr, sizeof(addr)); 
    
    if (listen(sListenn, SOMAXCONN) == SOCKET_ERROR) // прослушивание
    {
        printf("Listen failed with error: %ld\n", WSAGetLastError());
        closesocket(sListenn);
        WSACleanup();
        return 1;
    }


    SOCKET newConnection;
    while (true) {
        newConnection = accept(sListenn, (SOCKADDR*)&addr, &sizeofaddr);
        if (newConnection == INVALID_SOCKET) {
            std::cout << "Failed to accept connection\n";
        }
        else {
            std::cout << "Client connected!\n";
            // Отправка ответа клиенту
            send_response(newConnection);
            // Закрытие соединения
            closesocket(newConnection);
        }
    }

    //system("pause");

    closesocket(sListenn);
    WSACleanup();

    //http://127.0.0.1:15476

    return 0;
}